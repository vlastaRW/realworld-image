
#pragma once

#include <ConfigCustomGUIImpl.h>
#include <RWViewImageRaster.h>
#include <WTL_ColorPicker.h>


class ATL_NO_VTABLE CConfigGUIDropShadow :
	public CCustomConfigResourcelessWndImpl<CConfigGUIDropShadow>,
	public CDialogResize<CConfigGUIDropShadow>
{
public:
	CConfigGUIDropShadow() : m_wndColor(false)
	{
	}

	enum
	{
		IDC_CGDS_SIZEEDIT = 100, IDC_CGDS_SIZESPIN, IDC_CGDS_DENSITYEDIT, IDC_CGDS_DENSITYSPIN,
		IDC_CGDS_OFFSETXEDIT, IDC_CGDS_OFFSETXSPIN, IDC_CGDS_OFFSETYEDIT, IDC_CGDS_OFFSETYSPIN,
		IDC_CGDS_COLOR, IDC_CGDS_STANDARD, IDC_CGDS_OUTLINE, IDC_CGDS_BLENDING,
		IDC_CGDS_MASKIDLABEL, IDC_CGDS_MASKID
	};

	BEGIN_DIALOG_EX(0, 0, 120, (M_Mode() == ECPMWithCanvas ? 122 : 138), 0)
		DIALOG_FONT_AUTO()
		DIALOG_STYLE(WS_CHILD|WS_CLIPCHILDREN|WS_CLIPSIBLINGS|DS_CONTROL)
		DIALOG_EXSTYLE(0)
	END_DIALOG()

	BEGIN_CONTROLS_MAP()
		CONTROL_LTEXT(_T("[0409]Shadow size:[0405]Velikost stínu:"), IDC_STATIC, 0, 2, 66, 8, WS_VISIBLE, 0)
		CONTROL_EDITTEXT(IDC_CGDS_SIZEEDIT, 67, 0, 53, 12, WS_VISIBLE | WS_TABSTOP | ES_RIGHT | ES_AUTOHSCROLL, 0)
		CONTROL_CONTROL(_T(""), IDC_CGDS_SIZESPIN, UPDOWN_CLASS, UDS_ALIGNRIGHT | UDS_AUTOBUDDY | UDS_ARROWKEYS | UDS_NOTHOUSANDS | WS_VISIBLE, 74, 0, 11, 12, 0)
		CONTROL_LTEXT(_T("[0409]Density [%]:[0405]Hustota [%]:"), IDC_STATIC, 0, 18, 66, 8, WS_VISIBLE, 0)
		CONTROL_EDITTEXT(IDC_CGDS_DENSITYEDIT, 67, 16, 53, 12, WS_VISIBLE | WS_TABSTOP | ES_RIGHT | ES_AUTOHSCROLL, 0)
		CONTROL_CONTROL(_T(""), IDC_CGDS_DENSITYSPIN, UPDOWN_CLASS, UDS_ALIGNRIGHT | UDS_AUTOBUDDY | UDS_ARROWKEYS | UDS_NOTHOUSANDS | WS_VISIBLE, 74, 16, 11, 12, 0)
		CONTROL_LTEXT(_T("[0409]Horizontal offset:[0405]Horizontální posun:"), IDC_STATIC, 0, 34, 66, 8, WS_VISIBLE, 0)
		CONTROL_EDITTEXT(IDC_CGDS_OFFSETXEDIT, 67, 32, 53, 12, WS_VISIBLE | WS_TABSTOP | ES_RIGHT | ES_AUTOHSCROLL, 0)
		CONTROL_CONTROL(_T(""), IDC_CGDS_OFFSETXSPIN, UPDOWN_CLASS, UDS_ALIGNRIGHT | UDS_AUTOBUDDY | UDS_ARROWKEYS | UDS_NOTHOUSANDS | WS_VISIBLE, 74, 32, 11, 12, 0)
		CONTROL_LTEXT(_T("[0409]Vertical offset:[0405]Vertikální posun:"), IDC_STATIC, 0, 50, 66, 8, WS_VISIBLE, 0)
		CONTROL_EDITTEXT(IDC_CGDS_OFFSETYEDIT, 67, 48, 53, 12, WS_VISIBLE | WS_TABSTOP | ES_RIGHT | ES_AUTOHSCROLL, 0)
		CONTROL_CONTROL(_T(""), IDC_CGDS_OFFSETYSPIN, UPDOWN_CLASS, UDS_ALIGNRIGHT | UDS_AUTOBUDDY | UDS_ARROWKEYS | UDS_NOTHOUSANDS | WS_VISIBLE, 74, 48, 11, 12, 0)
		CONTROL_LTEXT(_T("[0409]Color:[0405]Barva:"), IDC_STATIC, 0, 66, 66, 8, WS_VISIBLE, 0)
		CONTROL_PUSHBUTTON(_T(""), IDC_CGDS_COLOR, 67, 64, 35, 12, WS_VISIBLE, 0)
		CONTROL_RADIOBUTTON(_T("[0409]Standard drop shadow[0405]Stín podle pokrytí"), IDC_CGDS_STANDARD, 0, 80, 120, 12, WS_VISIBLE, 0)
		CONTROL_RADIOBUTTON(_T("[0409]Edges-only shadow[0405]Stín pouze na hranách"), IDC_CGDS_OUTLINE, 0, 94, 120, 12, WS_VISIBLE, 0)
		CONTROL_LTEXT(_T("[0409]Shadow position:[0405]Pozice stínu:"), IDC_STATIC, 0, 112, 66, 8, WS_VISIBLE, 0)
		CONTROL_COMBOBOX(IDC_CGDS_BLENDING, 67, 110, 53/*75*/, 30, CBS_DROPDOWNLIST | CBS_SORT | WS_VSCROLL | WS_TABSTOP | WS_VISIBLE, 0)
		CONTROL_LTEXT(_T("[0409]Mask ID:[0405]ID masky:"), IDC_CGDS_MASKIDLABEL, 0, 128, 66, 8, WS_VISIBLE, 0)
		CONTROL_EDITTEXT(IDC_CGDS_MASKID, 67, 126, 53, 12, WS_VISIBLE | WS_TABSTOP | ES_AUTOHSCROLL, 0)
	END_CONTROLS_MAP()

	BEGIN_MSG_MAP(CConfigGUIDropShadow)
		CHAIN_MSG_MAP(CDialogResize<CConfigGUIDropShadow>)
		CHAIN_MSG_MAP(CCustomConfigResourcelessWndImpl<CConfigGUIDropShadow>)
		MESSAGE_HANDLER(WM_INITDIALOG, OnInitDialog)
		//NOTIFY_CODE_HANDLER(UDN_DELTAPOS, OnUpDownChange)
		NOTIFY_HANDLER(IDC_CGDS_COLOR, CButtonColorPicker::BCPN_SELCHANGE, OnColorChanged)
		REFLECT_NOTIFICATIONS()
	END_MSG_MAP()

	BEGIN_DLGRESIZE_MAP(CConfigGUIDropShadow)
		DLGRESIZE_CONTROL(IDC_CGDS_SIZEEDIT, DLSZ_SIZE_X)
		DLGRESIZE_CONTROL(IDC_CGDS_SIZESPIN, DLSZ_MOVE_X)
		DLGRESIZE_CONTROL(IDC_CGDS_DENSITYEDIT, DLSZ_SIZE_X)
		DLGRESIZE_CONTROL(IDC_CGDS_DENSITYSPIN, DLSZ_MOVE_X)
		DLGRESIZE_CONTROL(IDC_CGDS_OFFSETXEDIT, DLSZ_SIZE_X)
		DLGRESIZE_CONTROL(IDC_CGDS_OFFSETXSPIN, DLSZ_MOVE_X)
		DLGRESIZE_CONTROL(IDC_CGDS_OFFSETYEDIT, DLSZ_SIZE_X)
		DLGRESIZE_CONTROL(IDC_CGDS_OFFSETYSPIN, DLSZ_MOVE_X)
		DLGRESIZE_CONTROL(IDC_CGDS_MASKID, DLSZ_SIZE_X)
		DLGRESIZE_CONTROL(IDC_CGDS_BLENDING, DLSZ_SIZE_X)
	END_DLGRESIZE_MAP()

	BEGIN_CONFIGITEM_MAP(CConfigGUIDropShadow)
		CONFIGITEM_EDITBOX(IDC_CGDS_SIZEEDIT, CFGID_SIZE)
		CONFIGITEM_EDITBOX(IDC_CGDS_DENSITYEDIT, CFGID_DENSITY)
		CONFIGITEM_EDITBOX(IDC_CGDS_OFFSETXEDIT, CFGID_OFFSETX)
		CONFIGITEM_EDITBOX(IDC_CGDS_OFFSETYEDIT, CFGID_OFFSETY)
		CONFIGITEM_RADIO(IDC_CGDS_STANDARD, CFGID_TYPE, CFGVAL_TYPE_STANDARD)
		CONFIGITEM_RADIO(IDC_CGDS_OUTLINE, CFGID_TYPE, CFGVAL_TYPE_OUTLINE)
		CONFIGITEM_EDITBOX(IDC_CGDS_MASKID, CFGID_MASKID)
		CONFIGITEM_CONTEXTHELP(IDC_CGDS_COLOR, CFGID_COLOR)
		CONFIGITEM_COMBOBOX(IDC_CGDS_BLENDING, CFGID_BLENDING)
	END_CONFIGITEM_MAP()

	void ExtraInitDialog()
	{
		// initialize color button
		m_wndColor.m_tLocaleID = m_tLocaleID;
		m_wndColor.SubclassWindow(GetDlgItem(IDC_CGDS_COLOR));
		m_wndColor.SetDefaultText(NULL);
	}
	LRESULT OnInitDialog(UINT UNREF(a_uMsg), WPARAM UNREF(a_wParam), LPARAM UNREF(a_lParam), BOOL& a_bHandled)
	{
		SendDlgItemMessage(IDC_CGDS_SIZESPIN, UDM_SETRANGE, 0, MAKELPARAM(50, 0));
		SendDlgItemMessage(IDC_CGDS_DENSITYSPIN, UDM_SETRANGE, 0, MAKELPARAM(300, 10));
		SendDlgItemMessage(IDC_CGDS_OFFSETXSPIN, UDM_SETRANGE32, -100, 100);
		SendDlgItemMessage(IDC_CGDS_OFFSETYSPIN, UDM_SETRANGE32, -100, 100);

		CComPtr<IDocument> pDoc;
		if (M_Mode() != ECPMWithCanvas)
			GetParent().SendMessage(WM_RW_GETCFGDOC, 0, reinterpret_cast<LPARAM>(&pDoc));
		if (M_Mode() == ECPMWithCanvas || pDoc)
		{
			CEdit wnd = GetDlgItem(IDC_CGDS_MASKID);
			wnd.SetReadOnly(TRUE);
			wnd.ModifyStyle(WS_TABSTOP, 0);
			wnd.ShowWindow(SW_HIDE);
			GetDlgItem(IDC_CGDS_MASKIDLABEL).ShowWindow(SW_HIDE);
		}

		DlgResize_Init(false, false, 0);

		return 1;
	}

	LRESULT OnColorChanged(WPARAM a_wParam, LPNMHDR a_pNMHdr, BOOL& a_bHandled)
	{
		try
		{
			CButtonColorPicker::NMCOLORBUTTON const* const pClrBtn = reinterpret_cast<CButtonColorPicker::NMCOLORBUTTON const* const>(a_pNMHdr);
			CComBSTR cCFGID_COLOR(CFGID_COLOR);
			CConfigValue cValColor(static_cast<LONG>(pClrBtn->clr.ToCOLORREF()));
			BSTR aIDs[1];
			aIDs[0] = cCFGID_COLOR;
			TConfigValue aVals[1];
			aVals[0] = cValColor;
			M_Config()->ItemValuesSet(1, aIDs, aVals);
		}
		catch (...)
		{
		}

		return 0;
	}

	void ExtraConfigNotify()
	{
		if (m_wndColor.m_hWnd)
		{
			CConfigValue cValColor;
			M_Config()->ItemValueGet(CComBSTR(CFGID_COLOR), &cValColor);
			if (m_wndColor.GetColor() != CButtonColorPicker::SColor(cValColor.operator LONG()))
				m_wndColor.SetColor(CButtonColorPicker::SColor(cValColor.operator LONG()));
		}
	}

private:
	CTrackBarCtrl m_wndBlurSlider;
	CButtonColorPicker m_wndColor;
};

