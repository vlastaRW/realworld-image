
#pragma once

#include <WTL_ColorPicker.h>
extern __declspec(selectany) BYTE const g_aPicker[] = // the image is upside down
{
	0x20, 0x00, 
	0x20, 0x00, 
	0x20, 0x00, 
	0x11, 0x08, 0x04, 0x00, 0x00, 0x32, 0x00, 0x00, 0x76, 0x03, 0x03, 0x92, 0x09, 0x09, 0x92, 0x09, 0x09, 0x76, 0x00, 0x00, 0x32, 0x00, 0x00, 0x04, 0x00, 0x00, 
	0x10, 0x0a, 0x34, 0x00, 0x00, 0xbf, 0x1f, 0x1f, 0xfb, 0x50, 0x4a, 0xff, 0x77, 0x6a, 0xff, 0x81, 0x71, 0xff, 0x7e, 0x6e, 0xff, 0x6a, 0x5d, 0xfb, 0x3b, 0x36, 0xbf, 0x0e, 0x0e, 0x34, 0x00, 0x00, 
	0x0f, 0x0c, 0x54, 0x0b, 0x0b, 0xf1, 0x51, 0x4c, 0xff, 0x98, 0x86, 0xff, 0xa3, 0x8a, 0xff, 0xa3, 0x86, 0xff, 0xa4, 0x84, 0xff, 0xa1, 0x81, 0xff, 0x9d, 0x7e, 0xff, 0x98, 0x7d, 0xff, 0x7a, 0x69, 0xf1, 0x26, 0x24, 0x54, 0x00, 0x00, 
	0x0e, 0x0e, 0x34, 0x07, 0x07, 0xf1, 0x62, 0x5d, 0xff, 0xab, 0x95, 0xff, 0xb0, 0x92, 0xff, 0xc4, 0x71, 0xff, 0xe3, 0x3a, 0xff, 0xee, 0x21, 0xff, 0xec, 0x29, 0xff, 0xd8, 0x4b, 0xff, 0xb4, 0x7d, 0xff, 0x9d, 0x7c, 0xff, 0x89, 0x72, 0xf1, 0x27, 0x24, 0x34, 0x00, 0x00, 
	0x0d, 0x10, 0x04, 0x00, 0x00, 0xbf, 0x49, 0x48, 0xff, 0xb3, 0x9f, 0xff, 0xbd, 0x9e, 0xff, 0xde, 0x4a, 0xff, 0xfd, 0x01, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xf2, 0x0c, 0xff, 0xc3, 0x70, 0xff, 0xa0, 0x7c, 0xff, 0x7c, 0x68, 0xbf, 0x0e, 0x0e, 0x04, 0x00, 0x00, 
	0x0d, 0x10, 0x32, 0x07, 0x07, 0xfb, 0x96, 0x8c, 0xff, 0xc9, 0xaf, 0xff, 0xd7, 0x68, 0xff, 0xfe, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xf3, 0x0c, 0xff, 0xb9, 0x7d, 0xff, 0x9d, 0x7c, 0xfb, 0x3c, 0x35, 0x32, 0x00, 0x00, 
	0x0d, 0x10, 0x76, 0x3c, 0x3c, 0xff, 0xcb, 0xb9, 0xff, 0xda, 0xb9, 0xff, 0xee, 0x18, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xde, 0x4d, 0xff, 0xa5, 0x7d, 0xff, 0x6d, 0x5c, 0x76, 0x00, 0x00, 
	0x0d, 0x10, 0x92, 0x63, 0x62, 0xff, 0xe5, 0xcf, 0xff, 0xe3, 0xaf, 0xff, 0xfb, 0x01, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xf2, 0x2a, 0xff, 0xae, 0x7f, 0xff, 0x84, 0x6d, 0x92, 0x09, 0x09, 
	0x0d, 0x10, 0x92, 0x6e, 0x6c, 0xff, 0xf8, 0xe1, 0xff, 0xe9, 0xb5, 0xff, 0xfc, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xf6, 0x22, 0xff, 0xb4, 0x82, 0xff, 0x88, 0x6f, 0x92, 0x09, 0x09, 
	0x0d, 0x10, 0x76, 0x64, 0x64, 0xff, 0xfd, 0xf3, 0xff, 0xf7, 0xe2, 0xff, 0xec, 0x0b, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xf0, 0x3c, 0xff, 0xb3, 0x84, 0xff, 0x7d, 0x68, 0x76, 0x03, 0x03, 
	0x0d, 0x10, 0x32, 0x1e, 0x1e, 0xfb, 0xe2, 0xe1, 0xff, 0xff, 0xfd, 0xff, 0xe4, 0x5e, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xfe, 0x01, 0xff, 0xda, 0x71, 0xff, 0xb1, 0x87, 0xfb, 0x52, 0x47, 0x32, 0x00, 0x00, 
	0x0d, 0x10, 0x04, 0x00, 0x00, 0xc0, 0xa0, 0xa0, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xe8, 0xff, 0xe3, 0x26, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xfe, 0x00, 0xff, 0xef, 0x4a, 0xff, 0xc2, 0x8e, 0xff, 0xa1, 0x82, 0xbf, 0x1e, 0x1d, 0x04, 0x00, 0x00, 
	0x07, 0x15, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x3c, 0x3c, 0xf2, 0xd5, 0xd5, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xe8, 0xff, 0xe9, 0x5e, 0xff, 0xef, 0x0b, 0xff, 0xfd, 0x00, 0xff, 0xfc, 0x01, 0xff, 0xf7, 0x19, 0xff, 0xeb, 0x66, 0xff, 0xce, 0x98, 0xff, 0xb6, 0x90, 0xf1, 0x4f, 0x47, 0x34, 0x00, 0x00, 
	0x07, 0x14, 0x80, 0xff, 0xff, 0xff, 0x00, 0x00, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x55, 0x55, 0xf2, 0xd4, 0xd4, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xf6, 0xff, 0xfb, 0xd8, 0xff, 0xf3, 0xad, 0xff, 0xf2, 0xa8, 0xff, 0xe6, 0xaf, 0xff, 0xd3, 0xa6, 0xff, 0xba, 0x98, 0xf1, 0x60, 0x57, 0x54, 0x09, 0x09, 
	0x07, 0x13, 0x80, 0xff, 0xff, 0xff, 0x80, 0x80, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x3c, 0x3c, 0xc0, 0x9e, 0x9e, 0xfb, 0xe1, 0xdd, 0xff, 0xfb, 0xe5, 0xff, 0xf5, 0xd3, 0xff, 0xe5, 0xc2, 0xff, 0xcb, 0xae, 0xfb, 0x94, 0x83, 0xbf, 0x46, 0x42, 0x34, 0x06, 0x06, 
	0x07, 0x12, 0x80, 0xff, 0xff, 0xff, 0x00, 0x00, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x32, 0x1d, 0x1d, 0x76, 0x5f, 0x5e, 0x92, 0x67, 0x65, 0x92, 0x5d, 0x5c, 0x76, 0x38, 0x38, 0x32, 0x06, 0x06, 0x04, 0x00, 0x00, 
	0x07, 0x03, 0x80, 0xff, 0xff, 0xff, 0x80, 0x80, 0x80, 0xff, 0xff, 
	0x07, 0x03, 0x80, 0xff, 0xff, 0xff, 0x00, 0x00, 0x80, 0xff, 0xff, 
	0x07, 0x03, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 
	0x00, 0x11, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 
	0x00, 0x11, 0x80, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0x80, 0x80, 0xff, 0x00, 0x00, 0xff, 0x80, 0x80, 0xff, 0x00, 0x00, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0x80, 0x80, 0xff, 0x00, 0x00, 0xff, 0x80, 0x80, 0xff, 0x00, 0x00, 0x80, 0xff, 0xff, 
	0x00, 0x11, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 
	0x07, 0x03, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 
	0x07, 0x03, 0x80, 0xff, 0xff, 0xff, 0x00, 0x00, 0x80, 0xff, 0xff, 
	0x07, 0x03, 0x80, 0xff, 0xff, 0xff, 0x80, 0x80, 0x80, 0xff, 0xff, 
	0x07, 0x03, 0x80, 0xff, 0xff, 0xff, 0x00, 0x00, 0x80, 0xff, 0xff, 
	0x07, 0x03, 0x80, 0xff, 0xff, 0xff, 0x80, 0x80, 0x80, 0xff, 0xff, 
	0x07, 0x03, 0x80, 0xff, 0xff, 0xff, 0x00, 0x00, 0x80, 0xff, 0xff, 
	0x07, 0x03, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xff, 
};
extern __declspec(selectany) POINT const g_tPickerHotSpot = {8, 8};

void ActivateSolidFill(IRasterImageEditWindow* a_pWindow, TColor const& a_tColor);

template<class T, class TProcessInputHandler, class TAdjustCoordsHandler, class TGetCusorHandler>
class CEditToolWithCtrlDropper
{
public:
	CEditToolWithCtrlDropper() : m_bActive(false)
	{
		m_tLastPos.fX = m_tLastPos.fY = -1e10f;
	}

	HRESULT _ProcessInputEvent(EControlKeysState a_eKeysState, TPixelCoords const* a_pPos, TPixelCoords const* a_pPointerSize, float a_fNormalPressure, float a_fTangentPressure, float a_fOrientation, float a_fRotation, float a_fZ, DWORD* a_pMaxIdleTime)
	{
		if (a_pPos && (m_bActive || a_eKeysState & ECKSControl))
		{
			if (m_bActive)
			{
				if (a_fNormalPressure < 0.333f)
				{
					m_bActive = false;
				}
				else
				{
					if (a_pPos->fX != m_tLastPos.fX || a_pPos->fY != m_tLastPos.fY)
					{
						ColorFromPixel(a_pPos);
						m_tLastPos = *a_pPos;
					}
				}
			}
			else
			{
				if (a_fNormalPressure > 0.667f)
				{
					m_bActive = true;
					ColorFromPixel(a_pPos);
					m_tLastPos = *a_pPos;
				}
			}
			return S_OK;
		}
		else
		{
			return static_cast<TProcessInputHandler*>(static_cast<T*>(this))->_ProcessInputEvent(a_eKeysState, a_pPos, a_pPointerSize, a_fNormalPressure, a_fTangentPressure, a_fOrientation, a_fRotation, a_fZ, a_pMaxIdleTime);
		}
	}

	HRESULT _AdjustCoordinates(EControlKeysState a_eKeysState, TPixelCoords* a_pPos, TPixelCoords const* a_pPointerSize, ULONG const* a_pControlPointIndex, float a_fPointSize)
	{
		if (a_eKeysState&ECKSControl && a_pControlPointIndex == NULL)
		{
			a_pPos->fX = floorf(a_pPos->fX);
			a_pPos->fY = floorf(a_pPos->fY);
			return S_OK;
		}
		return static_cast<TAdjustCoordsHandler*>(static_cast<T*>(this))->_AdjustCoordinates(a_eKeysState, a_pPos, a_pPointerSize, a_pControlPointIndex, a_fPointSize);
	}

	HRESULT _GetCursor(EControlKeysState a_eKeysState, TPixelCoords const* a_pPos, HCURSOR* a_phCursor)
	{
		if ((a_eKeysState & ECKSControl) || m_bActive)
		{
			ULONG nSizeX = 0;
			ULONG nSizeY = 0;
			static_cast<T*>(this)->M_Window()->Size(&nSizeX, &nSizeY);
			if (a_pPos->fX < 0.0f || a_pPos->fY < 0.0f || a_pPos->fX >= nSizeX || a_pPos->fY >= nSizeY)
			{
				static HCURSOR h = ::LoadCursor(NULL, IDC_NO);
				*a_phCursor = h;
				return S_OK;
			}
			else
			{
				static OSVERSIONINFO tVersion = { sizeof(OSVERSIONINFO), 0, 0, 0, 0, _T("") };
				if (tVersion.dwMajorVersion == 0)
					GetVersionEx(&tVersion);
				if (tVersion.dwMajorVersion >= 5)
				{
					TRasterImagePixel tPixel = {0, 0, 0, 0};
					static_cast<T*>(this)->/*M_Window()->*/GetImageTile(a_pPos->fX, a_pPos->fY, 1, 1, 2.2f, 1, &tPixel);
					*a_phCursor = WTL::CPixelColorPicker::CreateDropperCursor(RGB(tPixel.bR, tPixel.bG, tPixel.bB)|(ULONG(tPixel.bA)<<24));
					return S_FALSE;
				}
				static HCURSOR h = ::LoadCursor(NULL, IDC_ARROW);
				*a_phCursor = h;
				return S_OK;
			}
		}
		else
		{
			return static_cast<TGetCusorHandler*>(static_cast<T*>(this))->_GetCursor(a_eKeysState, a_pPos, a_phCursor);
		}
	}

private:
	void ColorFromPixel(TPixelCoords const* a_pPos)
	{
		TRasterImagePixel tPixel;
		if (SUCCEEDED(static_cast<T*>(this)->/*M_Window()->*/GetImageTile(a_pPos->fX, a_pPos->fY, 1, 1, 2.2f, 1, &tPixel)))
		{
			TColor t = {CGammaTables::FromSRGB(tPixel.bR), CGammaTables::FromSRGB(tPixel.bG), CGammaTables::FromSRGB(tPixel.bB), tPixel.bA/255.0f};
			ActivateSolidFill(static_cast<T*>(this)->M_Window(), t);
		}
	}

private:
	TPixelCoords m_tLastPos;
	bool m_bActive;
};

